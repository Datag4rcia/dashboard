import streamlit as st
import pandas as pd
import plotly.express as px
import statsmodels.api as sm  # Necess√°rio para trendline="ols"

# ‚úÖ PRIMEIRO comando do Streamlit
st.set_page_config(page_title="Previs√µes com ExtraTrees", layout="wide")

# Agora o resto do app pode vir
st.title("üìä Dashboard Interativo - Previs√µes do ativo AAPL")

# Carregamento do CSV (exemplo com upload manual)
uploaded_file = st.file_uploader("üì§ Envie o arquivo CSV de previs√µes", type="csv")

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)

    st.subheader("üîç Tabela de Resultados")
    st.dataframe(df, use_container_width=True)

    st.subheader("üìà Gr√°fico: Valor Real vs Predi√ß√£o")
    fig = px.scatter(
        df,
        x="Valor_Real",
        y="Predicao",
        trendline="ols",
        title="Dispers√£o entre valores reais e predi√ß√µes",
        labels={"Valor_Real": "Valor Real", "Predicao": "Predi√ß√£o"},
        color_discrete_sequence=["#2E86AB"]
    )
    st.plotly_chart(fig, use_container_width=True)

   # Gr√°fico de barras
    st.subheader("üìä Gr√°fico de Barras: Valor Real vs Predi√ß√£o")
    fig_bar = px.bar(
        df,
        x=df.index,
        y=["Valor_Real", "Predicao"],
        labels={"value": "Valor", "index": "√çndice"},
        barmode="group",
        color_discrete_map={
            "Valor_Real": "#1f77b4",
            "Predicao": "#ff7f0e"
        },
        title="Compara√ß√£o entre valores reais e predi√ß√µes"
    )
    st.plotly_chart(fig_bar, use_container_width=True)

    # M√©trica de erro
    erro_abs = (df['Valor_Real'] - df['Predicao']).abs()
    st.metric("Erro M√©dio Absoluto", f"{erro_abs.mean():.2f}")

    st.markdown("---")
    st.caption("Obrigada!")
else:
    st.warning("Por favor, envie um arquivo CSV para visualizar os dados.")
    st.stop()
